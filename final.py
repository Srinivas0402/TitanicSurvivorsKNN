# -*- coding: utf-8 -*-
"""final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yJE0wIAfq3KrXDDq5nnX1f8pRZmjm0_e
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df=pd.read_csv('./Dataset/train.csv')
df = df.reset_index()

x=df.iloc[:,[3,5,6,10]].values
y=df.iloc[:,2].values

from sklearn.preprocessing import LabelEncoder

labelencoder_X = LabelEncoder()
x[:, 1] = labelencoder_X.fit_transform(x[:, 1])

#MISSING VALUES
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values = np.nan, strategy = 'mean')
imputer = imputer.fit(x[:,2:3])
x[:,2:3] = imputer.transform(x[:,2:3])

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x = sc.fit_transform(x)

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
classifier.fit(x,y)

#TEST dataset


df_t=pd.read_csv('./Dataset/test.csv')
df_t = df_t.reset_index()



x_test=df_t.iloc[:,[2,4,5,9]]

x_test_v=df_t.iloc[:,[2,4,5,9]].values

labelencoder_t = LabelEncoder()
x_test_v[:, 1] = labelencoder_t.fit_transform(x_test_v[:, 1])

imputer_t = SimpleImputer(missing_values = np.nan, strategy = 'mean')
imputer_t = imputer_t.fit(x_test_v[:,[2,3]])
x_test_v[:,[2,3]] = imputer_t.transform(x_test_v[:,[2,3]])

y_pred=classifier.predict(x_test_v)

y_test=df.iloc[0:418,2]

(unique, counts) = np.unique(y_pred, return_counts=True)
frequencies = np.asarray((unique, counts)).T

b=[]
c=[]
b.append(frequencies[0,1])
b.append(frequencies[1,1])
c.append(frequencies[0,0])
c.append(frequencies[1,0])
np.arange(len(c))

#PLOTTING FOR NO OF PEOPLE SURVIVED AND NO OF PEOPLE NOT SURVIVED
width=0.25
i=np.arange(len(c))
t=['NOT SURVIVED','SURVIVED']
plt.bar(np.arange(len(c)),b,width=width)
plt.title("PREDICTION")
plt.ylabel("no of people")
plt.xticks(ticks=i,labels=t)
plt.show()

df_t['Survived']=y_pred

df_t

#COMPUTING NO OF PEOPLE IN EACH AGE RANGE
final0=list()
for i in range(0,90,10):
  if i<80:
    filt=((df_t['Age']>=i) & (df_t['Age']<=i+10) & (df_t['Survived']==0))
    count=df_t.loc[filt,'Age'].shape[0]
    final0.append(count)

final1=list()
for i in range(0,90,10):
  if i<80:
    filt=((df_t['Age']>=i) & (df_t['Age']<=i+10) & (df_t['Survived']==1))
    count=df_t.loc[filt,'Age'].shape[0]
    final1.append(count)

#COMPUTING AGE RANGE
age_range=list()
for i in range(10,90,10):
  age_range.append(i)

#PLOTTING GRAPH FOR NOT SURVIVED FOR EACH AGE RANGE  
width=0.40
i=np.arange(len(age_range))
c=['0-10','10-20','20-30','30-40','40-50','50-60','60-70','70-80']
plt.bar(i,final0,width=width)
plt.title("SURVIVED= 0")
plt.xlabel("ages ")
plt.ylabel("no of people")
plt.xticks(ticks=i,labels=c)
plt.show()

#PLOTTING GRAPH FOR  SURVIVED FOR EACH AGE RANGE  
width=0.40
i=np.arange(len(age_range))
c=['0-10','10-20','20-30','30-40','40-50','50-60','60-70','70-80']
plt.bar(i,final1,width=width)
plt.title("SURVIVED= 1")
plt.xlabel("ages ")
plt.ylabel("no of people")
plt.xticks(ticks=i,labels=c)
plt.show()

df_t

#computing the no of males in survived=0
finalm0=list()
filt=((df_t['Sex']=='male') & (df_t['Survived']==0))
count=df_t.loc[filt,'Age'].shape[0]
finalm0.append(count)

#computing the no of females in survived=0
filt=((df_t['Sex']=='female') & (df_t['Survived']==0))
count=df_t.loc[filt,'Age'].shape[0]
finalm0.append(count)

#computing the no of males in survived=1
finalf0=list()
filt=((df_t['Sex']=='male') & (df_t['Survived']==1))
count=df_t.loc[filt,'Age'].shape[0]
finalf0.append(count)

#computing the no of females in survived=1
filt=((df_t['Sex']=='female') & (df_t['Survived']==1))
count=df_t.loc[filt,'Age'].shape[0]
finalf0.append(count)

a=['male','female']

#PLOTTING GRAPH FOR NO OF MALE AND FEMALE NOT SURVIVED 
width=0.20
plt.bar(a,finalm0,width=width)
plt.title("NO OF MALE AND FEMALES NOT SURVIVED")
plt.ylabel("no of people")
plt.show()

#PLOTTING GRAPH FOR NO OF MALE AND FEMALE SURVIVED 
width=0.20
plt.bar(a,finalf0,width=width)
plt.title("NO OF MALE AND FEMALES SURVIVED")
plt.ylabel("no of people")
plt.show()

#COMPUTING NO OF PEOPLE NOT SURVIVED IN EACH CLASS
finalp0=list()
for i in range(1,4):
    filt=((df_t['Pclass']==i) & (df_t['Survived']==0))
    count=df_t.loc[filt,'Age'].shape[0]
    finalp0.append(count)

#COMPUTING NO OF PEOPLE  SURVIVED IN EACH CLASS
finalp1=list()
for i in range(1,4):
    filt=((df_t['Pclass']==i) & (df_t['Survived']==1))
    count=df_t.loc[filt,'Age'].shape[0]
    finalp1.append(count)

#PLOTTING GRAPH FOR NO OF PEOPLE NOT SURVIVED IN EACH CLASS
width=0.20
yy=[1,2,3]
i=np.arange(len(yy))
plt.bar(i,finalp0,width=width)
plt.title("NO OF PEOPLE NOT SURVIVED IN EACH CLASS")
plt.xlabel('CLASS')
plt.ylabel("no of people")
plt.xticks(ticks=i,labels=yy)
plt.show()

#PLOTTING GRAPH FOR NO OF PEOPLE SURVIVED IN EACH CLASS
width=0.20
plt.bar(i,finalp1,width=width)
plt.title("NO OF PEOPLE SURVIVED IN EACH CLASS")
plt.xlabel('CLASS')
plt.ylabel("no of people")
plt.xticks(ticks=i,labels=yy)
plt.show()

#PREPARING THE DATASET
final_df=pd.DataFrame()
final_df['PassengerID']=df_t['PassengerId']
final_df['Survived']=y_pred

final_df.to_csv('./Dataset/predicted_survival.csv',index=False)









